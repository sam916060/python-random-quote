{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPBkVvEL9RheztYzIUjpVWP",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sam916060/python-random-quote/blob/master/Longitudinal_cracking1.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lCYhUECsBnPI"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PVmESEFZX4Ig"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zgbK_F8-X7em"
      },
      "source": [
        "## Importing the dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "adBE4tjQX_Bh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "15236910-8e91-485f-dc60-ae66429a20ab"
      },
      "source": [
        "dataset = pd.read_csv('LC-11.11.csv')\n",
        "X = dataset.iloc[:, :-1].values\n",
        "y = dataset.iloc[:, -1].values\n",
        "dataset"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        ST   BT    AD    JS  Annual precipitation  Average annual temp range  \\\n",
              "0     10.2  6.0  1149  6.10           1347.500000                       16.4   \n",
              "1     10.2  6.0  1183  6.10           1097.300049                       16.0   \n",
              "2     10.2  6.0  1219  6.10           1422.000000                       15.8   \n",
              "3     10.2  6.0  1255  6.10           1472.800049                       16.1   \n",
              "4     10.2  6.0  1293  6.10           1594.400024                       15.5   \n",
              "...    ...  ...   ...   ...                   ...                        ...   \n",
              "1061   8.9  5.9   347  5.08           1071.199951                        6.3   \n",
              "1062   8.9  5.9   450  5.08            776.299988                        7.3   \n",
              "1063   8.9  5.9   405  5.08            712.200012                        7.1   \n",
              "1064   8.9  5.9   573  5.08           1118.199951                        5.2   \n",
              "1065   8.9  5.9   620  5.08           1061.599976                        6.2   \n",
              "\n",
              "      Freezing index  Compressive strength  Elastic modulus  \\\n",
              "0                 25                7105.5        6850000.0   \n",
              "1                 57                7105.5        6850000.0   \n",
              "2                 29                7105.5        6850000.0   \n",
              "3                 26                7105.5        6850000.0   \n",
              "4                 43                7105.5        6850000.0   \n",
              "...              ...                   ...              ...   \n",
              "1061             962                7885.0        3925000.0   \n",
              "1062             656                7885.0        3925000.0   \n",
              "1063             807                7885.0        3925000.0   \n",
              "1064            1215                7885.0        3925000.0   \n",
              "1065            1012                7885.0        3925000.0   \n",
              "\n",
              "      Density of concrete  Modulus of rupture  Tensile strength  Age  \\\n",
              "0              155.649994               740.4             741.5   33   \n",
              "1              155.649994               740.4             741.5   34   \n",
              "2              155.649994               740.4             741.5   35   \n",
              "3              155.649994               740.4             741.5   36   \n",
              "4              155.649994               740.4             741.5   37   \n",
              "...                   ...                 ...               ...  ...   \n",
              "1061           141.750000               740.4             567.5   20   \n",
              "1062           141.750000               740.4             567.5   23   \n",
              "1063           141.750000               740.4             567.5   26   \n",
              "1064           141.750000               740.4             567.5   28   \n",
              "1065           141.750000               740.4             567.5   30   \n",
              "\n",
              "      LC for 100 m length  \n",
              "0                0.688525  \n",
              "1                0.688525  \n",
              "2                0.655738  \n",
              "3                0.754098  \n",
              "4                0.754098  \n",
              "...                   ...  \n",
              "1061             4.921260  \n",
              "1062             8.267716  \n",
              "1063            18.963254  \n",
              "1064            25.328084  \n",
              "1065            38.648294  \n",
              "\n",
              "[1066 rows x 14 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a594daba-286a-4e7f-9907-c0cb010c414d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ST</th>\n",
              "      <th>BT</th>\n",
              "      <th>AD</th>\n",
              "      <th>JS</th>\n",
              "      <th>Annual precipitation</th>\n",
              "      <th>Average annual temp range</th>\n",
              "      <th>Freezing index</th>\n",
              "      <th>Compressive strength</th>\n",
              "      <th>Elastic modulus</th>\n",
              "      <th>Density of concrete</th>\n",
              "      <th>Modulus of rupture</th>\n",
              "      <th>Tensile strength</th>\n",
              "      <th>Age</th>\n",
              "      <th>LC for 100 m length</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10.2</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1149</td>\n",
              "      <td>6.10</td>\n",
              "      <td>1347.500000</td>\n",
              "      <td>16.4</td>\n",
              "      <td>25</td>\n",
              "      <td>7105.5</td>\n",
              "      <td>6850000.0</td>\n",
              "      <td>155.649994</td>\n",
              "      <td>740.4</td>\n",
              "      <td>741.5</td>\n",
              "      <td>33</td>\n",
              "      <td>0.688525</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10.2</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1183</td>\n",
              "      <td>6.10</td>\n",
              "      <td>1097.300049</td>\n",
              "      <td>16.0</td>\n",
              "      <td>57</td>\n",
              "      <td>7105.5</td>\n",
              "      <td>6850000.0</td>\n",
              "      <td>155.649994</td>\n",
              "      <td>740.4</td>\n",
              "      <td>741.5</td>\n",
              "      <td>34</td>\n",
              "      <td>0.688525</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10.2</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1219</td>\n",
              "      <td>6.10</td>\n",
              "      <td>1422.000000</td>\n",
              "      <td>15.8</td>\n",
              "      <td>29</td>\n",
              "      <td>7105.5</td>\n",
              "      <td>6850000.0</td>\n",
              "      <td>155.649994</td>\n",
              "      <td>740.4</td>\n",
              "      <td>741.5</td>\n",
              "      <td>35</td>\n",
              "      <td>0.655738</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>10.2</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1255</td>\n",
              "      <td>6.10</td>\n",
              "      <td>1472.800049</td>\n",
              "      <td>16.1</td>\n",
              "      <td>26</td>\n",
              "      <td>7105.5</td>\n",
              "      <td>6850000.0</td>\n",
              "      <td>155.649994</td>\n",
              "      <td>740.4</td>\n",
              "      <td>741.5</td>\n",
              "      <td>36</td>\n",
              "      <td>0.754098</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>10.2</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1293</td>\n",
              "      <td>6.10</td>\n",
              "      <td>1594.400024</td>\n",
              "      <td>15.5</td>\n",
              "      <td>43</td>\n",
              "      <td>7105.5</td>\n",
              "      <td>6850000.0</td>\n",
              "      <td>155.649994</td>\n",
              "      <td>740.4</td>\n",
              "      <td>741.5</td>\n",
              "      <td>37</td>\n",
              "      <td>0.754098</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1061</th>\n",
              "      <td>8.9</td>\n",
              "      <td>5.9</td>\n",
              "      <td>347</td>\n",
              "      <td>5.08</td>\n",
              "      <td>1071.199951</td>\n",
              "      <td>6.3</td>\n",
              "      <td>962</td>\n",
              "      <td>7885.0</td>\n",
              "      <td>3925000.0</td>\n",
              "      <td>141.750000</td>\n",
              "      <td>740.4</td>\n",
              "      <td>567.5</td>\n",
              "      <td>20</td>\n",
              "      <td>4.921260</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1062</th>\n",
              "      <td>8.9</td>\n",
              "      <td>5.9</td>\n",
              "      <td>450</td>\n",
              "      <td>5.08</td>\n",
              "      <td>776.299988</td>\n",
              "      <td>7.3</td>\n",
              "      <td>656</td>\n",
              "      <td>7885.0</td>\n",
              "      <td>3925000.0</td>\n",
              "      <td>141.750000</td>\n",
              "      <td>740.4</td>\n",
              "      <td>567.5</td>\n",
              "      <td>23</td>\n",
              "      <td>8.267716</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1063</th>\n",
              "      <td>8.9</td>\n",
              "      <td>5.9</td>\n",
              "      <td>405</td>\n",
              "      <td>5.08</td>\n",
              "      <td>712.200012</td>\n",
              "      <td>7.1</td>\n",
              "      <td>807</td>\n",
              "      <td>7885.0</td>\n",
              "      <td>3925000.0</td>\n",
              "      <td>141.750000</td>\n",
              "      <td>740.4</td>\n",
              "      <td>567.5</td>\n",
              "      <td>26</td>\n",
              "      <td>18.963254</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1064</th>\n",
              "      <td>8.9</td>\n",
              "      <td>5.9</td>\n",
              "      <td>573</td>\n",
              "      <td>5.08</td>\n",
              "      <td>1118.199951</td>\n",
              "      <td>5.2</td>\n",
              "      <td>1215</td>\n",
              "      <td>7885.0</td>\n",
              "      <td>3925000.0</td>\n",
              "      <td>141.750000</td>\n",
              "      <td>740.4</td>\n",
              "      <td>567.5</td>\n",
              "      <td>28</td>\n",
              "      <td>25.328084</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1065</th>\n",
              "      <td>8.9</td>\n",
              "      <td>5.9</td>\n",
              "      <td>620</td>\n",
              "      <td>5.08</td>\n",
              "      <td>1061.599976</td>\n",
              "      <td>6.2</td>\n",
              "      <td>1012</td>\n",
              "      <td>7885.0</td>\n",
              "      <td>3925000.0</td>\n",
              "      <td>141.750000</td>\n",
              "      <td>740.4</td>\n",
              "      <td>567.5</td>\n",
              "      <td>30</td>\n",
              "      <td>38.648294</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1066 rows × 14 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a594daba-286a-4e7f-9907-c0cb010c414d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a594daba-286a-4e7f-9907-c0cb010c414d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a594daba-286a-4e7f-9907-c0cb010c414d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ptNjcy7bOBlD"
      },
      "source": [
        "## Splitting the dataset into the Training set and Test set"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C7NdofoCOFQF"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 16)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v4S2fyIBYDcu"
      },
      "source": [
        "## Training the Random Forest Regression model on the whole dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o8dOCoJ1YKMc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "80e83796-8bc0-4c41-a6a1-8f7112861c55"
      },
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "from pprint import pprint\n",
        "# Number of trees in random forest\n",
        "n_estimators = [int(x) for x in np.linspace(start = 100, stop = 2000, num = 10)]\n",
        "# Number of features to consider at every split\n",
        "max_features = ['auto', 'sqrt']\n",
        "max_features.append(None)\n",
        "# Maximum number of levels in tree\n",
        "max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n",
        "max_depth.append(None)\n",
        "# Minimum number of samples required to split a node\n",
        "min_samples_split = [2, 5, 10]\n",
        "# Minimum number of samples required at each leaf node\n",
        "min_samples_leaf = [1, 2, 4]\n",
        "# Method of selecting samples for training each tree\n",
        "bootstrap = [True, False]\n",
        "# Create the random grid\n",
        "random_grid = {'n_estimators': n_estimators,\n",
        "               'max_features': max_features,\n",
        "               'max_depth': max_depth,\n",
        "               'min_samples_split': min_samples_split,\n",
        "               'min_samples_leaf': min_samples_leaf,\n",
        "               'bootstrap': bootstrap}\n",
        "pprint(random_grid)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'bootstrap': [True, False],\n",
            " 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None],\n",
            " 'max_features': ['auto', 'sqrt', None],\n",
            " 'min_samples_leaf': [1, 2, 4],\n",
            " 'min_samples_split': [2, 5, 10],\n",
            " 'n_estimators': [100, 311, 522, 733, 944, 1155, 1366, 1577, 1788, 2000]}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "regressor = RandomForestRegressor()\n",
        "rf_random = RandomizedSearchCV(estimator = regressor, param_distributions = random_grid, n_iter = 10, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n",
        "rf_random.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "id": "D8szKMdtwYp8",
        "outputId": "5bcdf53f-0355-4465-e845-1957730f4921"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomizedSearchCV(cv=3, estimator=RandomForestRegressor(), n_jobs=-1,\n",
              "                   param_distributions={'bootstrap': [True, False],\n",
              "                                        'max_depth': [10, 20, 30, 40, 50, 60,\n",
              "                                                      70, 80, 90, 100, 110,\n",
              "                                                      None],\n",
              "                                        'max_features': ['auto', 'sqrt', None],\n",
              "                                        'min_samples_leaf': [1, 2, 4],\n",
              "                                        'min_samples_split': [2, 5, 10],\n",
              "                                        'n_estimators': [100, 311, 522, 733,\n",
              "                                                         944, 1155, 1366, 1577,\n",
              "                                                         1788, 2000]},\n",
              "                   random_state=42, verbose=2)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=3, estimator=RandomForestRegressor(), n_jobs=-1,\n",
              "                   param_distributions={&#x27;bootstrap&#x27;: [True, False],\n",
              "                                        &#x27;max_depth&#x27;: [10, 20, 30, 40, 50, 60,\n",
              "                                                      70, 80, 90, 100, 110,\n",
              "                                                      None],\n",
              "                                        &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, None],\n",
              "                                        &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
              "                                        &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
              "                                        &#x27;n_estimators&#x27;: [100, 311, 522, 733,\n",
              "                                                         944, 1155, 1366, 1577,\n",
              "                                                         1788, 2000]},\n",
              "                   random_state=42, verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=3, estimator=RandomForestRegressor(), n_jobs=-1,\n",
              "                   param_distributions={&#x27;bootstrap&#x27;: [True, False],\n",
              "                                        &#x27;max_depth&#x27;: [10, 20, 30, 40, 50, 60,\n",
              "                                                      70, 80, 90, 100, 110,\n",
              "                                                      None],\n",
              "                                        &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, None],\n",
              "                                        &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
              "                                        &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
              "                                        &#x27;n_estimators&#x27;: [100, 311, 522, 733,\n",
              "                                                         944, 1155, 1366, 1577,\n",
              "                                                         1788, 2000]},\n",
              "                   random_state=42, verbose=2)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rf_random.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AQMMYvbhxETW",
        "outputId": "759d8c2d-ed81-41c4-a29c-901f157caa61"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'n_estimators': 1366,\n",
              " 'min_samples_split': 2,\n",
              " 'min_samples_leaf': 1,\n",
              " 'max_features': 'sqrt',\n",
              " 'max_depth': 80,\n",
              " 'bootstrap': False}"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "best_grid = rf_random.best_estimator_"
      ],
      "metadata": {
        "id": "pm0QukVfxjKq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = rf_random.predict(X_test)\n",
        "np.set_printoptions(precision=2)\n",
        "print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RKS9LhtVpkVT",
        "outputId": "cef22ce9-78f7-4544-f2c9-ec7665b196b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[114.27 107.48]\n",
            " [  9.28  14.9 ]\n",
            " [118.94 124.74]\n",
            " [  9.29   5.91]\n",
            " [ 28.86  38.25]\n",
            " [  2.69   1.57]\n",
            " [ 11.48  11.48]\n",
            " [  8.65   6.63]\n",
            " [  2.86   0.98]\n",
            " [125.48 159.12]\n",
            " [  5.96   0.98]\n",
            " [  3.13   2.76]\n",
            " [ 12.36   8.53]\n",
            " [  1.02   0.26]\n",
            " [  3.75   0.72]\n",
            " [  0.98   0.98]\n",
            " [  2.11   1.97]\n",
            " [ 63.28  81.36]\n",
            " [136.96 141.14]\n",
            " [ 18.71  16.52]\n",
            " [  5.81   4.33]\n",
            " [  4.63   5.71]\n",
            " [ 10.09  10.04]\n",
            " [ 19.98  11.15]\n",
            " [  4.01   2.95]\n",
            " [  1.44   1.25]\n",
            " [  3.03   5.51]\n",
            " [ 35.71  17.19]\n",
            " [  4.58   2.69]\n",
            " [  4.59   4.59]\n",
            " [  3.27   3.74]\n",
            " [  9.61   8.14]\n",
            " [ 20.2   19.55]\n",
            " [  1.57   1.12]\n",
            " [  5.62   2.03]\n",
            " [  7.81   6.63]\n",
            " [ 53.56  63.71]\n",
            " [  9.12   6.5 ]\n",
            " [  4.07   3.41]\n",
            " [113.83 167.91]\n",
            " [  1.82   1.57]\n",
            " [  6.09   2.36]\n",
            " [  2.06   0.33]\n",
            " [ 65.1   51.18]\n",
            " [ 35.45  24.41]\n",
            " [  5.04   4.  ]\n",
            " [138.47 120.98]\n",
            " [  1.71   0.59]\n",
            " [ 22.26  21.03]\n",
            " [  2.65   2.62]\n",
            " [  8.1    5.64]\n",
            " [  3.54   0.92]\n",
            " [  1.72   0.66]\n",
            " [ 12.01   0.66]\n",
            " [  3.06   3.08]\n",
            " [  9.84   9.84]\n",
            " [  1.88   1.25]\n",
            " [  9.84   9.84]\n",
            " [ 11.48  13.91]\n",
            " [  3.56   4.  ]\n",
            " [ 12.69   8.66]\n",
            " [  3.87   1.97]\n",
            " [ 14.62  20.73]\n",
            " [129.73 159.12]\n",
            " [  9.     0.79]\n",
            " [  4.67   5.77]\n",
            " [  5.27   4.86]\n",
            " [  6.32   0.92]\n",
            " [  7.36   0.69]\n",
            " [  2.21   1.64]\n",
            " [ 42.74  46.46]\n",
            " [  3.25   0.59]\n",
            " [  5.19   1.9 ]\n",
            " [  1.66   0.98]\n",
            " [  9.98  18.31]\n",
            " [  2.18   0.66]\n",
            " [  2.75   1.38]\n",
            " [ 90.02  91.99]\n",
            " [  4.14   0.33]\n",
            " [ 45.35  37.6 ]\n",
            " [  3.98   0.75]\n",
            " [  5.16   2.17]\n",
            " [  3.99   0.98]\n",
            " [ 19.94  21.85]\n",
            " [ 25.31   4.59]\n",
            " [  1.64   1.64]\n",
            " [ 20.28   1.51]\n",
            " [ 42.22  73.49]\n",
            " [  8.     2.1 ]\n",
            " [  5.85   9.51]\n",
            " [  2.31   1.51]\n",
            " [ 14.43  21.98]\n",
            " [ 17.67   7.81]\n",
            " [ 21.7   37.07]\n",
            " [  1.71   0.26]\n",
            " [137.89 123.97]\n",
            " [ 13.87   9.19]\n",
            " [118.93 116.6 ]\n",
            " [  7.27  15.49]\n",
            " [108.71 116.54]\n",
            " [ 41.7   47.38]\n",
            " [  8.12   1.77]\n",
            " [116.83 131.89]\n",
            " [  6.84   2.95]\n",
            " [  5.74   0.39]\n",
            " [ 22.97  18.97]\n",
            " [  9.31   1.64]\n",
            " [ 13.74  32.87]\n",
            " [  9.76   2.43]\n",
            " [ 35.27  31.63]\n",
            " [ 13.88   4.59]\n",
            " [123.45 123.56]\n",
            " [ 13.83  10.04]\n",
            " [ 33.8   37.53]\n",
            " [ 12.58  36.09]\n",
            " [  4.71   0.72]\n",
            " [ 17.26   2.82]\n",
            " [  6.46   5.12]\n",
            " [  2.43   0.92]\n",
            " [  1.56   0.72]\n",
            " [ 10.68   2.03]\n",
            " [  4.04   2.03]\n",
            " [ 11.25  26.25]\n",
            " [  8.42  13.12]\n",
            " [ 10.39   0.79]\n",
            " [139.62 149.38]\n",
            " [ 11.04  11.68]\n",
            " [ 15.13   3.22]\n",
            " [  3.53   2.03]\n",
            " [ 45.34  15.16]\n",
            " [ 50.17  54.46]\n",
            " [  1.52   0.92]\n",
            " [  3.68   1.18]\n",
            " [  5.4    5.05]\n",
            " [  0.33   0.33]\n",
            " [ 53.41  53.41]\n",
            " [  8.17   3.41]\n",
            " [  6.5    3.22]\n",
            " [ 15.06  21.52]\n",
            " [  2.3    0.79]\n",
            " [  1.49   0.59]\n",
            " [  5.26   1.9 ]\n",
            " [  3.04   0.85]\n",
            " [ 45.02  57.48]\n",
            " [  8.47  13.25]\n",
            " [ 17.78  11.81]\n",
            " [  5.73   2.17]\n",
            " [ 34.57  33.99]\n",
            " [ 67.29  70.21]\n",
            " [ 79.89 119.55]\n",
            " [  4.59   7.55]\n",
            " [ 65.4   71.52]\n",
            " [ 89.41  70.34]\n",
            " [  0.99   0.46]\n",
            " [  6.04   0.52]\n",
            " [ 43.59  72.7 ]\n",
            " [  3.87   2.76]\n",
            " [  6.42   0.33]\n",
            " [  7.87   7.87]\n",
            " [  4.56   6.04]\n",
            " [ 96.91 109.25]\n",
            " [ 36.42  30.12]\n",
            " [135.83 164.37]\n",
            " [  6.16   1.25]\n",
            " [  2.59   0.52]\n",
            " [  5.72   8.6 ]\n",
            " [  2.84   1.71]\n",
            " [  1.35   0.66]\n",
            " [  1.87   0.39]\n",
            " [  8.87  11.29]\n",
            " [  5.54   0.46]\n",
            " [  4.48   5.77]\n",
            " [  3.97   4.86]\n",
            " [  2.56   1.9 ]\n",
            " [  1.95   0.66]\n",
            " [  1.56   0.59]\n",
            " [  7.66   0.66]\n",
            " [141.47 149.64]\n",
            " [ 12.3    0.72]\n",
            " [ 12.42  18.77]\n",
            " [ 14.37  14.37]\n",
            " [142.33 143.77]\n",
            " [  2.99   2.03]\n",
            " [  2.66   0.33]\n",
            " [ 27.95  15.68]\n",
            " [  3.08   1.71]\n",
            " [143.43 155.34]\n",
            " [ 14.19  15.68]\n",
            " [ 30.03  33.33]\n",
            " [  9.21  11.22]\n",
            " [  6.92   8.73]\n",
            " [  7.79  11.29]\n",
            " [ 15.83  24.54]\n",
            " [  3.41   0.59]\n",
            " [  5.01   1.31]\n",
            " [ 32.02  21.13]\n",
            " [ 42.27  43.04]\n",
            " [  2.15   0.66]\n",
            " [  4.01   2.76]\n",
            " [ 13.73   0.2 ]\n",
            " [ 47.23  32.94]\n",
            " [  5.58   1.57]\n",
            " [  3.17   0.98]\n",
            " [ 24.43   6.23]\n",
            " [  2.11   3.15]\n",
            " [ 17.05  26.95]\n",
            " [  2.1    0.72]\n",
            " [ 43.3   42.13]\n",
            " [  4.23   0.98]\n",
            " [  3.83   1.51]\n",
            " [ 60.24  69.75]\n",
            " [ 67.1   45.8 ]\n",
            " [ 41.89  43.83]\n",
            " [ 27.37  13.85]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import r2_score\n",
        "r2_score(y_test, y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jIAFZPWBpd9c",
        "outputId": "0d12fd6b-ea09-4efe-e463-4747178b4a53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9410207026510515"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred1 = rf_random.predict([[10,6,1000,6,1000,15,20,3000,6900000,150,741,750,30]])\n",
        "y_pred1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w4bdqh-UCEI7",
        "outputId": "f0576f0f-4b0a-4f89-bd05-fcc98c5146b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([35.76])"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    }
  ]
}